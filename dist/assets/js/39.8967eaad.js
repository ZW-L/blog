(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{404:function(t,v,_){"use strict";_.r(v);var e=_(25),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),_("ul",[_("li",[t._v("参考 "),_("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN RegExp"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"构造函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),_("ul",[_("li",[t._v("使用 new 操作符")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ab+c'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/ab+c/")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("ul",[_("li",[t._v("使用字面量")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/ab+c/i")]),t._v("\n")])])]),_("h2",{attrs:{id:"属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),_("ul",[_("li",[t._v("它们都是在 "),_("code",[t._v("RegExp")]),t._v(" 上定义的")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("属性")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("版本")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("name")])]),t._v(" "),_("td",[t._v("值为 "),_("code",[t._v("'RegExp'")])]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("length")])]),t._v(" "),_("td",[t._v("值为 "),_("code",[t._v("2")])]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("lastIndex")])]),t._v(" "),_("td",[t._v("读取/设置下一次匹配的起始索引")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("prototype")])]),t._v(" "),_("td",[t._v("返回 "),_("code",[t._v("RegExp")]),t._v(" 的原型对象")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("$1-$9")])]),t._v(" "),_("td",[t._v("正则表达式捕获的前九个分组")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("input ($_)")])]),t._v(" "),_("td",[t._v("正则表达式所测试的完整字符串")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("lastMatch ($&)")])]),t._v(" "),_("td",[t._v("最后匹配到的字符串")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("lastParen ($+)")])]),t._v(" "),_("td",[t._v("匹配到的最后一个子串")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("leftContext ($`)")])]),t._v(" "),_("td",[t._v("含有最新匹配的左侧子串")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("rightContext ($')")])]),t._v(" "),_("td",[t._v("含有最新匹配的右侧子串")]),t._v(" "),_("td",[_("Badge",{attrs:{type:"warning"}},[t._v("非标准")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("get RegExp[@@species]")])]),t._v(" "),_("td",[t._v("返回 "),_("code",[t._v("RegExp")]),t._v(" 的构造器")]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)])])]),t._v(" "),_("h2",{attrs:{id:"方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),_("ul",[_("li",[t._v("它们都是在 "),_("code",[t._v("RegExp.prototype")]),t._v(" 上定义的")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("描述")]),t._v(" "),_("th",[t._v("版本")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("constructor")])]),t._v(" "),_("td",[t._v("返回 "),_("code",[t._v("RegExp")]),t._v(" 的构造函数")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("flags")])]),t._v(" "),_("td",[t._v("返回当前正则表达式对象的标志组成的字符串")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("global")])]),t._v(" "),_("td",[t._v("表明是否开启全局匹配")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("ignoreCase")])]),t._v(" "),_("td",[t._v("表明是否忽略字符的大小写")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("multiline")])]),t._v(" "),_("td",[t._v("表明是否开启了多行模式匹配（影响 ^ 和 $ 的行为）")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("source")])]),t._v(" "),_("td",[t._v("当前正则表达式的字符串形式（不包括前后的反斜杠）")]),t._v(" "),_("td",[t._v("-")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("sticky")])]),t._v(" "),_("td",[t._v("表明是否开启粘滞匹配")]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("dotAll")])]),t._v(" "),_("td",[t._v("表明是否在正则表达式中使用 "),_("code",[t._v("s")]),t._v(" 修饰符")]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("unicode")])]),t._v(" "),_("td",[t._v("表明正则表达式是否带有 "),_("code",[t._v("u")]),t._v(" 标志")]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("toString()")])]),t._v(" "),_("td",[t._v("返回正则对象的字面量形式的字符串")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("compile()")])]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("exec()")])]),t._v(" "),_("td",[t._v("在目标字符串中执行一次正则匹配操作")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("test()")])]),t._v(" "),_("td",[t._v("测试当前正则是否能匹配目标字符串")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("[Symbol.match]()")])]),t._v(" "),_("td",[t._v("等同于 "),_("code",[t._v("String.prototype.match()")])]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("[Symbol.matchAll]()")])]),t._v(" "),_("td",[t._v("等同于 "),_("code",[t._v("String.prototype.matchAll()")])]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("[Symbol.replace]()")])]),t._v(" "),_("td",[t._v("等同于 "),_("code",[t._v("String.prototype.replace()")])]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("[Symbol.search]()")])]),t._v(" "),_("td",[t._v("等同于 "),_("code",[t._v("String.prototype.search()")])]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)]),t._v(" "),_("tr",[_("td",[_("code",[t._v("[Symbol.split]()")])]),t._v(" "),_("td",[t._v("等同于 "),_("code",[t._v("String.prototype.split()")])]),t._v(" "),_("td",[_("Badge",[t._v("6")])],1)])])])])}),[],!1,null,null,null);v.default=a.exports}}]);