(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{454:function(t,a,s){"use strict";s.r(a);var r=s(25),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"array-新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-新增方法"}},[t._v("#")]),t._v(" Array 新增方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Array.prototype.flat(arr: Array, depth=1?: Number): Array")]),t._v(": 按照一个指定的深度将数组扁平化")]),t._v(" "),s("li",[s("code",[t._v("Array.prototype.flatMap(callback: Function, thisArg?: Object): Array")]),t._v(": 使用回调函数遍历数组，再将结果数组扁平化("),s("code",[t._v("depth")]),t._v(" 为 1)")])]),t._v(" "),s("h2",{attrs:{id:"string-新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-新增方法"}},[t._v("#")]),t._v(" String 新增方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("String.prototype.trimStart(): String")]),t._v(": 剔除字符串开头的空格")]),t._v(" "),s("li",[s("code",[t._v("String.prototype.trimEnd(): String")]),t._v(": 剔除字符串结尾的空格")]),t._v(" "),s("li",[s("code",[t._v("String.prototype.matchAll(regex: RexExp): Iterator")]),t._v(": 返回一个包含所有匹配结果及捕获组的迭代器")])]),t._v(" "),s("h2",{attrs:{id:"function-优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-优化"}},[t._v("#")]),t._v(" Function 优化")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Function.prototype.toString()")]),t._v(" 现在返回精确字符，包括空格和注释")])]),t._v(" "),s("h2",{attrs:{id:"object-新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-新增方法"}},[t._v("#")]),t._v(" Object 新增方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object.fromEntries(obj: Object): Array")]),t._v(": 返回一个给定对象自身可枚举属性的键值对数组")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("说明：")]),t._v(" "),s("ul",[s("li",[t._v("实际上是 "),s("code",[t._v("Object.entries()")]),t._v(" 的逆向操作")])])]),t._v(" "),s("h2",{attrs:{id:"symbol-新增属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-新增属性"}},[t._v("#")]),t._v(" Symbol 新增属性")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Symbol.prototype.description")])])]),t._v(" "),s("h2",{attrs:{id:"bigint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("ul",[s("li",[t._v("行分隔符(U+2028)和段分隔符(U+2029)符号现在允许在字符串文字中，与 JSON 匹配")]),t._v(" "),s("li",[t._v("错误捕获的 "),s("code",[t._v("catch")]),t._v(" 子句可以不带异常参数")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 带异常参数 e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不需要使用异常参数时可以不带异常参数 e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);